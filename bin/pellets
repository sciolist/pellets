#!/usr/bin/env node

var prog = process.env._
var HELP = [
 "Usage: " + prog + " [options] [(glob) ...]"
,""
,"options:"
,"  -f, --format     add text to output files, can use the variables:"
,"                    \$f - name of the template"
,"                    \$s - generated method"
,"  -o, --out        path to write the output to, can use the variables:"
,"                    \$f - name of the template"
,"  -r, --run        give a scope to run the template in instead of compiling"
,"  --opts           json parsing options"
,"  --help           display this help"
,""].join("\n")

function help() { console.error(HELP); process.exit(1); }
function crash(v, ex) {
  console.error(prog + ": " + (v || "Error"));
  if(ex) console.error("Error was: " + ex);
  console.error("Write " + prog + " --help for instructions.");
  process.exit(10);
}

var fs = require('fs')
  , pellets = require('../')
  , path = require('path')
  , glob = require('glob')
  , format = "if(typeof global === 'undefined') { global = window; }; global['script_$f'] = $s;"
  , paths  = []
  , opts   = {}
  , run    = null
  , out    = null
  , args   = process.argv.slice(2)
  ;

while(args.length) {
  var value = args.shift();
  try {
  switch(value) {
    case "-f":
    case "--format":
      format = args.shift();
      break;
    case "-o":
    case "--out":
      out = args.shift();
      break;
    case "--opts":
      opts = eval("(" + (args[0] || "{}") + ")");
      args.shift();
      break;
    case "-r":
    case "--run":
      run = true;
      if(args[0] && args[0][0] !== "-") {
        run = eval("(" + (args[0] || true) + ")");
        args.shift();
      }
      break;
    case "--help":
      help();
      break;
    default:
      if(value[0] === "-") {
        crash("unexpected option " + value);
      }
      var results = glob.sync(value);
      if(!results.length) {
        crash("no such file or folder " + value);
      }
      paths.push.apply(paths, results);
      break;
  }
  } catch(e) {
    crash("could not process " + value, e.message); 
  }
}

function output(fileName, result) {
  var wrapped = format.replace(/\$s/g, result)
                      .replace(/\$f/g, fileName);

  if(out) {
    var file = out.replace(/\$f/g, fileName);
    if(out[out.length-1] === "/" || (out.indexOf("$f") === -1 && paths.length > 1)) {
      file = path.join(file, fileName);
    }
    var dir = path.relative(process.pwd, path.normalize(path.dirname(file))).split(path.sep);
    for(var i=0; i<dir.length; ++i) {
      var dirname = dir.slice(0, i + 1).join(path.sep);
      try { fs.mkdirSync(dirname); } catch(e) { }
    }
    fs.writeFileSync(file, result);
    return;
  }
  console.log(result);
}

function build(data) {
  if(run !== null) {
    return pellets.compile(data, opts)(run);
  }
  return pellets.generate(data, opts);
}

if(paths.length) {
  paths.map(function(v) {
    var data = fs.readFileSync(v).toString(), result;
    output(v, build(data));
  })
} else if(process.stdin.paused) {
  process.stdin.on("data", function(data) {
    output("stdin", build(data.toString()));
  });
  process.stdin.resume();
} else help();

